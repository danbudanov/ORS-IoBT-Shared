function [eWindow, eWindowMCU, eWindowTRX, windowADC, windowTRX, bytes, D] = operateWindow(eAvailable, config)
%{
########################################################################################
PROBLEM:
operateWindow(.319950148, config)

ans =

    0.9546

^^when last digit >8 stops showing .9546, remains at .95.. for any vals
below


findN(.106 (=.32/3), config) = 0
#########################################################################################
        usage:
        operateWindow(eAvailable, config);
            %windowLength -- in seconds
            eAvailable -- the energy in the supercapacitor at the point
            config -- configuration structure generated by setup.m
        config is a structure with the following data:
            numSens -- the number of sensors gathering data
            vIn -- operating voltage of the node
            LPM -- the low power mode the node remains in when not
                processing or rx/tx
            f_oco -- the oscillator frequency
            I_active -- active current
            -----------numBytesTx / numBytesRx -- the number of bytes that the node will be
                transmitting/receiving------XXXXX-----------------------
            dataRate
%}
%{
% %generate MCU block for sampling
%     [eMCUSample tMCUSample bytes] = operateADC(config.vIn, config.adcProfile);
%     [eRunMCUadc tRunMCUadc] = operateMCU(config.I_active, config.vIn, config.LPM, config.f_oco, tMCUSample);
%     eMCUBlock = eMCUSample + eRunMCUadc; tMCUBlock = tRunMCUadc;
% %generate TRX block for transmitting data
%     [eTXTransmit tTXTransmit] = tx(config.vIn, bytes, config.power, config.dataRate);
%     [eRunTRX tRunTRX] = operateMCU(config.I_active, config.vIn, config.LPM, config.f_oco, tTXTransmit);
%     eTXBlock = eTXTransmit + eRunTRX; tTRXBlock = tRunTRX;
%}
% --windowLength = config.T_tx * config.k;--
n = double(findN( eAvailable/config.k, config));
if n > 0
    [eNet, eNetMCU, eNetTRX, cycle, D] = operateCycle(config, n);
    
else
    n = 0;
    eNetMCU = mcuSleep(config, config.T_tx);
    eNetTRX = trxSleep(config, config.T_tx);
    eNet = eNetMCU + eNetTRX;
    cycle.ADC = [0 (config.T_tx); (eNetMCU/(config.T_tx)).*ones(1, 2)];
    cycle.TRX = [0 (config.T_tx); (eNetTRX/(config.T_tx)).*ones(1, 2)];
    D.MCU = 0;
    D.TRX = 0;
end
%% create energy usage profiles for k cycles
eWindow = eNet * config.k;
eWindowMCU = eNetMCU * config.k;
eWindowTRX = eNetTRX * config.k;
windowADC = repmat(cycle.ADC, 1, config.k);
windowADC(1,:) = makeContTimes(cycle.ADC(1,:), config.k, config.T_tx);
windowTRX = repmat(cycle.TRX, 1, config.k);
windowTRX(1,:) = makeContTimes(cycle.TRX(1,:), config.k, config.T_tx);


bytes = n * config.k * length(config.adcProfile) * (config.trials ^ config.txDataParam);
